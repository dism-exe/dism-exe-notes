/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LanPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/spawn_peripheral_note_command.ts
var import_obsidian3 = require("obsidian");
var path = __toESM(require("path"));

// src/notecluster.ts
var import_obsidian2 = require("obsidian");

// src/common.ts
var import_obsidian = require("obsidian");
function make_hex_id(length) {
  var result = "";
  var characters = "abcdef0123456789";
  var charactersLength = characters.length;
  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}
function get_file_frontmatter_note_property(view, file, prop) {
  const opt_cache = view.app.metadataCache.getFileCache(file);
  if (!opt_cache) {
    console.log(`Error: Could not retrieve file cache for ${file.name}`);
    return void 0;
  }
  const cache = opt_cache;
  const opt_frontmatter = cache.frontmatter;
  if (!opt_frontmatter) {
    console.log(`Error: Could not retrieve frontmatter for ${file.name}`);
    return void 0;
  }
  const frontmatter = opt_frontmatter;
  const opt_value = frontmatter[prop];
  if (!opt_value) {
    console.log(`Error: Could not retrieve frontmatter property ${prop} for ${file.name}`);
    return void 0;
  }
  const value = opt_value.replace("[[", "").replace("]]", "");
  const opt_linked_file = file.vault.getMarkdownFiles().find((f) => f.basename === value);
  if (!opt_linked_file) {
    console.log(`Error: Could not find file for link ${value}`);
    return void 0;
  }
  return opt_linked_file;
}
function insert_text_at_editor_cursor_in_own_line(editor, text) {
  const cursor = editor.getCursor();
  editor.replaceRange("\n" + text + "\n", cursor);
}
function get_child_folder_by_name(folder, child_name) {
  for (var i = 0; i < folder.children.length; i++) {
    const child = folder.children[i];
    if (child instanceof import_obsidian.TFolder && child.name === child_name) {
      return child;
    }
  }
  return void 0;
}
function get_folder_child_file_count_non_recursive(folder) {
  var count = 0;
  for (var i = 0; i < folder.children.length; i++) {
    const child = folder.children[i];
    if (child instanceof import_obsidian.TFile) {
      count++;
    }
  }
  return count;
}

// src/notecluster.ts
var CONTEXT_TYPE_FOLDERS = [
  "entries",
  "howtos",
  "ideas",
  "inferences",
  "investigations",
  "issues",
  "tasks"
];
var CONTEXT_TYPE_BLOCK_IDENTIFIER_CODE = [
  "entry",
  "howto",
  "idea",
  "infer",
  "invst",
  "issue",
  "task"
];
var CONTEXT_TYPE_HEADINGS_SINGULAR = [
  "Entry",
  "HowTo",
  "Idea",
  "Inference",
  "Investigation",
  "Issue",
  "Task"
];
function context_type_singular_convert(context_type, new_type_strings) {
  const index = CONTEXT_TYPE_HEADINGS_SINGULAR.findIndex((elem) => elem === context_type);
  if (index == -1) {
    return void 0;
  }
  if (index < 0 || index >= new_type_strings.length) {
    console.log(
      `Error: Unexpected value for ${index} for context type lookup`
    );
    return void 0;
  }
  return new_type_strings[index];
}
function context_type_heading_singular_is_doer(heading) {
  const doers = [
    // "Entry",
    "HowTo",
    // "Idea",
    // "Inference",
    "Investigation",
    "Issue",
    "Task"
  ];
  return doers.contains(heading);
}
function folder_has_note_of_same_name(folder) {
  for (var i = 0; i < folder.children.length; i++) {
    const child = folder.children[i];
    if (child instanceof import_obsidian2.TFile) {
      if (folder.name == child.basename) {
        return true;
      }
    }
  }
  return false;
}
function is_cluster_root_folder(folder) {
  if (!folder_has_note_of_same_name(folder) || get_folder_child_file_count_non_recursive(folder) != 1) {
    return false;
  }
  return true;
}
function is_cluster_category_folder(folder) {
  if (!CONTEXT_TYPE_FOLDERS.includes(folder.name)) {
    return false;
  }
  const opt_parent = folder.parent;
  if (!opt_parent) {
    return false;
  }
  const parent = opt_parent;
  if (!is_cluster_root_folder(parent)) {
    return false;
  }
  return true;
}
function is_cluster_root_file(file) {
  const opt_parent = file.parent;
  if (!opt_parent) {
    return false;
  }
  const parent = opt_parent;
  if (!is_cluster_root_folder(parent)) {
    return false;
  }
  if (parent.name != file.basename) {
    return false;
  }
  return true;
}
function get_cluster_core_file_from_peripheral(view, peripheral_file) {
  const opt_parent_file = get_file_frontmatter_note_property(
    view,
    peripheral_file,
    "parent"
  );
  if (!opt_parent_file) {
    console.log(`Error: Could not retrieve frontmatter note property parent for ${peripheral_file.name}`);
    return void 0;
  }
  const parent_file = opt_parent_file;
  if (!is_cluster_root_file(parent_file)) {
    console.log(`Error: ${parent_file.name} is not a bignote index file`);
    return void 0;
  }
  return parent_file;
}
function get_cluster_core_file_from_cluster_root_folder(folder) {
  if (!is_cluster_root_folder(folder)) {
    console.log(`Error: Expected ${folder.name} to be a bignote root folder`);
    return void 0;
  }
  for (var i = 0; i < folder.children.length; i++) {
    const child = folder.children[i];
    if (child instanceof import_obsidian2.TFile && child.basename == folder.name) {
      return child;
    }
  }
  console.log(`Assertion Failed: No index file found in bignote root folder`);
  return void 0;
}
function is_cluster_non_index_file(view, file) {
  const opt_parent = file.parent;
  if (!opt_parent) {
    console.log(`Error: Failed to retrieve parent folder for ${file.name}`);
    return false;
  }
  const parent_folder = opt_parent;
  if (!is_cluster_category_folder(parent_folder)) {
    console.log(`Error: ${parent_folder.name} is not a bignote category folder`);
    return false;
  }
  const opt_parent_file = get_cluster_core_file_from_peripheral(view, file);
  if (!opt_parent_file) {
    console.log(`Error: Could not get big note index file for ${file.name}`);
    return false;
  }
  const parent_file = opt_parent_file;
  const opt_grandparent_folder = parent_folder.parent;
  if (!opt_grandparent_folder) {
    console.log(`Error: Could not get grandparent for ${file.name}`);
    return false;
  }
  const grandparent_folder = opt_grandparent_folder;
  if (grandparent_folder != parent_file.parent) {
    console.log(`Error: Expected grandparent ${grandparent_folder.name} to be identical to parent folder of ${parent_file.path}`);
    return false;
  }
  return true;
}
function display_triplet_id(id) {
  if (id < 10) {
    return "00" + id.toString();
  } else if (id < 100) {
    return "0" + id.toString();
  } else {
    return id.toString();
  }
}
function get_next_triplet_id_for_folder(context_folder_name, index_file) {
  if (!CONTEXT_TYPE_FOLDERS.includes(context_folder_name)) {
    return void 0;
  }
  const opt_bignote_root_folder = index_file.parent;
  if (!opt_bignote_root_folder) {
    return void 0;
  }
  const bignote_root_folder = opt_bignote_root_folder;
  const opt_context_folder = get_child_folder_by_name(bignote_root_folder, context_folder_name);
  if (!opt_context_folder) {
    return void 0;
  }
  const context_folder = opt_context_folder;
  const num_files_in_context_folder = get_folder_child_file_count_non_recursive(context_folder);
  return display_triplet_id(num_files_in_context_folder);
}
function get_all_index_folders_in_vault(view) {
  const folders = view.app.vault.getAllFolders(false).filter((folder) => is_cluster_root_folder(folder));
  return folders;
}

// src/spawn_peripheral_note_command.ts
async function run_with_user_input(editor, view, opt_selected_bignote_root_folder, selected_context, new_note_name) {
  const opt_spawner_file = view.file;
  if (!opt_spawner_file) {
    new import_obsidian3.Notice(`Error: Please use this command from within a note to spawn from`);
    return;
  }
  const spawner_file = opt_spawner_file;
  const spawner_is_index = is_cluster_root_file(spawner_file);
  if (!spawner_is_index && !opt_selected_bignote_root_folder && !is_cluster_non_index_file(view, spawner_file)) {
    new import_obsidian3.Notice(`Error: Spawner file is not a small note`);
    return;
  }
  var opt_index_file = void 0;
  if (spawner_is_index) {
    opt_index_file = spawner_file;
  } else if (opt_selected_bignote_root_folder) {
    opt_index_file = get_cluster_core_file_from_cluster_root_folder(opt_selected_bignote_root_folder);
  } else {
    opt_index_file = get_cluster_core_file_from_peripheral(view, spawner_file);
  }
  if (!opt_index_file) {
    new import_obsidian3.Notice(`Error: Failed to retrieve index file`);
    return;
  }
  const index_file = opt_index_file;
  const opt_bignote_root_folder = index_file.parent;
  if (!opt_bignote_root_folder) {
    new import_obsidian3.Notice(`Failed Assertion: index file has no parent`);
    return;
  }
  const bignote_root_folder = opt_bignote_root_folder;
  const opt_context_folder_name = context_type_singular_convert(selected_context, CONTEXT_TYPE_FOLDERS);
  if (!opt_context_folder_name) {
    new import_obsidian3.Notice(`Error: Failed to retrieve context folder`);
    return;
  }
  const context_folder_name = opt_context_folder_name;
  const opt_context_block_identifier_code = context_type_singular_convert(selected_context, CONTEXT_TYPE_BLOCK_IDENTIFIER_CODE);
  if (!opt_context_block_identifier_code) {
    new import_obsidian3.Notice(`Error: Failed to retrieve context block identifier code`);
    return;
  }
  const context_block_identifier_code = opt_context_block_identifier_code;
  const context_folder_path = (0, import_obsidian3.normalizePath)(path.join(bignote_root_folder.path, context_folder_name));
  const fs = spawner_file.vault.adapter;
  console.log(`context_folder_path: ${context_folder_path}`);
  await fs.mkdir(context_folder_path);
  const id6 = make_hex_id(6);
  const opt_triplet_id = get_next_triplet_id_for_folder(context_folder_name, index_file);
  if (!opt_triplet_id) {
    new import_obsidian3.Notice(`Error: Failed to generate new triplet id`);
    return;
  }
  const triplet_id = opt_triplet_id;
  const new_note_basename = `${triplet_id} ${new_note_name}`;
  const block_identifier = `^spawn-${context_block_identifier_code}-${id6}`;
  insert_text_at_editor_cursor_in_own_line(editor, `Spawn [[${new_note_basename}]] ${block_identifier}`);
  const new_file_path = (0, import_obsidian3.normalizePath)(path.join(context_folder_path, new_note_basename + ".md"));
  console.log(`new_file_path: ${new_file_path}`);
  var automatic_status = "";
  if (context_type_heading_singular_is_doer(selected_context)) {
    automatic_status = `status: todo
`;
  }
  var context_type = selected_context.toLowerCase();
  await fs.write(
    new_file_path,
    `---
parent: "[[${index_file.basename}]]"
spawned_by: "[[${spawner_file.basename}]]"
context_type: ${context_type}
` + automatic_status + `---

Parent: [[${index_file.basename}]]

Spawned by: [[${spawner_file.basename}]] 

Spawned in: [[${spawner_file.basename}#${block_identifier}|${block_identifier}]]

# Journal`
  );
}
var InputNoteNameModal = class extends import_obsidian3.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.setTitle("New Note Name (without NNN ID)");
    let name = "";
    new import_obsidian3.Setting(this.contentEl).setName("New Note Name").addText(
      (text) => text.onChange((value) => {
        name = value;
      })
    );
    new import_obsidian3.Setting(this.contentEl).addButton(
      (btn) => btn.setButtonText("Submit").setCta().onClick(() => {
        this.close();
        onSubmit(name);
      })
    );
  }
};
var SelectContextTypeModal = class extends import_obsidian3.FuzzySuggestModal {
  constructor(app, editor, view, opt_selected_index_folder) {
    super(app);
    this.editor = editor;
    this.view = view;
    this.opt_selected_bignote_root_folder = opt_selected_index_folder;
  }
  getItems() {
    return CONTEXT_TYPE_HEADINGS_SINGULAR;
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item, evt) {
    new InputNoteNameModal(this.app, (result) => {
      run_with_user_input(this.editor, this.view, this.opt_selected_bignote_root_folder, item, result);
    }).open();
  }
};
var SelectBignoteRootFolderModal = class extends import_obsidian3.FuzzySuggestModal {
  constructor(app, editor, view) {
    super(app);
    this.editor = editor;
    this.view = view;
  }
  getItems() {
    return get_all_index_folders_in_vault(this.view);
  }
  getItemText(item) {
    return item.name;
  }
  onChooseItem(item, evt) {
    new SelectContextTypeModal(
      this.view.app,
      this.editor,
      this.view,
      /*opt_selected_bignote_root_folder*/
      item
    ).open();
  }
};
async function run(editor, view) {
  new SelectContextTypeModal(
    view.app,
    editor,
    view,
    /*opt_selected_bignote_root_folder*/
    void 0
  ).open();
}
async function run_from_outside(editor, view) {
  new SelectBignoteRootFolderModal(view.app, editor, view).open();
}

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var LanPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon(
      "dice",
      "Sample Plugin",
      (evt) => {
        new import_obsidian4.Notice("This is a notice!");
      }
    );
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Plugin typed a message!");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "spawn-peripheral-note",
      name: "Spawn Peripheral Note",
      editorCallback: run
    });
    this.addCommand({
      id: "spawn-peripheral-note-from-outside",
      name: "Spawn Peripheral Note From Outside",
      editorCallback: run_from_outside
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian4.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian4.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText(
      (text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
        this.plugin.settings.mySetting = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
